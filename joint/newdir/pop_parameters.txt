Nonlinear mixed-effects model fit by the SAEM algorithm
-----------------------------------
----          Data             ----
-----------------------------------
Object of class SaemixData
    longitudinal data for use with the SAEM algorithm
Dataset data_joint 
    Structured data: obs ~ time + obs | id 
    X variable for graphs: time () 
Dataset characteristics:
    number of subjects:     100 
    number of observations: 1553 
    average/min/max nb obs: 15.53  /  2  /  32 
First 10 lines of data:
   id time      obs    obs.1 mdv cens occ ytype
1   1    0 5.218760 5.218760   0    0   1     1
2   1    1 6.515998 6.515998   0    0   1     1
3   1    2 4.881910 4.881910   0    0   1     1
4   1    3 5.125165 5.125165   0    0   1     1
5   1    4 5.319637 5.319637   0    0   1     1
6   1    5 4.086405 4.086405   0    0   1     1
7   1    6 4.777055 4.777055   0    0   1     1
8   1    7 5.454198 5.454198   0    0   1     1
9   1    8 3.515051 3.515051   0    0   1     1
10  1    9 5.762519 5.762519   0    0   1     1
-----------------------------------
----          Model            ----
-----------------------------------
Nonlinear mixed-effects model
  Model function:  JM lin+competing risks
  Model type:  structural likelihood
function(psi,id,xidep) {
    ytype<-xidep$ytype  
    
    b0 <- psi[id,1]
    b1 <- psi[id,2]
    p1 <- psi[id,3] 
    g1 <- psi[id,4]
    b <- psi[id,5]
    alpha1 <- psi[id,6]
    
    T<-xidep[ytype==2,1] # vector of times partie survie ev 1
    ev = xidep$obs[ytype==2]
    Nj <- length(T)
    cens<-which(ev==0)  # indices of censored observations
    ind1 <- which(ev==1) # indices of event 1
    ind2 <- which(ev==2) # indices of event 2
    
    schem = sapply(1:Nj, function(i) sum(floor(T[1:i])+1)+i)
    
    b0b = b0[schem]
    b1b = b1[schem]
    p1b <- p1[schem]
    g1b <- g1[schem]
    alpha1b = alpha1[schem]
    bb = b[schem]
    
    f=function(x) seq(0,x,length.out=100)
    tab = mapply(f,T)
    tab = t(tab)
    pas = tab[,2]-tab[,1]
    
    f2=function(x) seq(0,x,length.out=1000)
    tab2 = replicate(Nj,f2(1000))
    tab2 = t(tab2)
    pas2 = tab2[,2]-tab2[,1]
    
    haz1 = p1b*g1b*exp(-g1b*tab)/(1-p1b*(1-exp(-g1b*tab)))*exp(alpha1b*(b0b+b1b*tab))
    H1 = apply(haz1,1,sum)*pas
    hazt1 = haz1[,100]
    
    haz1b = p1b*g1b*exp(-g1b*tab2)/(1-p1b*(1-exp(-g1b*tab2)))*exp(alpha1b*(b0b+b1b*tab2))
    H1b = apply(haz1b,1,sum)*pas2
    F1 = pmin(1-exp(-H1b),0.99999)
    
    hazt2 = 1/bb*(1-F1)*exp(-T/bb)/(1-(1-F1)*(1-exp(-T/bb)))
    H2 = -log(1-(1-F1)*(1-exp(-T/bb)))
    
    logpdf <- rep(0,Nj)
    logpdf[cens] <- log(exp(-H1[cens])+exp(-H2[cens])-1)
    logpdf[ind1] <- -H1[ind1] + log(hazt1[ind1]) 
    logpdf[ind2] <- -H2[ind2] + log(hazt2[ind2]) 
    
    ypred = rep(NA,length(xidep[,1]))
    
    ypred[ytype==1] = b0[ytype==1]+b1[ytype==1]*xidep[ytype==1,1]
    ypred[ytype==2] = logpdf
    
    return(ypred)
  }
<bytecode: 0x0000014e3b5221d0>
  Nb of parameters: 6 
      parameter names:  b0 b1 p1 g1 b alpha1 
      distribution:
     Parameter Distribution Estimated
[1,] b0        normal       Estimated
[2,] b1        normal       Estimated
[3,] p1        logit        Estimated
[4,] g1        log-normal   Estimated
[5,] b         normal       Estimated
[6,] alpha1    normal       Estimated
  Variance-covariance matrix:
       b0 b1 p1 g1 b alpha1
b0      1  0  0  0 0      0
b1      0  1  0  0 0      0
p1      0  0  0  0 0      0
g1      0  0  0  0 0      0
b       0  0  0  0 0      0
alpha1  0  0  0  0 0      0
  Error model: constant , initial values: a.1=1 
    No covariate in the model.
    Initial values
             b0  b1  p1  g1  b alpha1
Pop.CondInit  4 0.3 0.4 0.1 10      0
-----------------------------------
----    Key algorithm options  ----
-----------------------------------
    Estimation of standard errors and linearised log-likelihood
    Number of iterations:  K1=20, K2=5 
    Number of chains:  3 
    Seed:  12345 
    Simulations:
        nb of simulated datasets used for npde:  1000 
        nb of simulated datasets used for VPC:  100 
    Input/output
        save the results to a file:  TRUE 
        save the graphs to files:  TRUE 
        directory where results should be saved:  newdir 
----------------------------------------------------
----                  Results                   ----
----------------------------------------------------
-----------------  Fixed effects  ------------------
----------------------------------------------------
     Parameter Estimate
[1,] b0         4.068  
[2,] b1         0.257  
[3,] p1         0.067  
[4,] g1         0.135  
[5,] b         15.378  
[6,] alpha1     0.289  
[7,] a.1        1.056  
----------------------------------------------------
-----------  Variance of random effects  -----------
----------------------------------------------------
   Parameter Estimate
b0 omega2.b0 4.198   
b1 omega2.b1 0.083   
----------------------------------------------------
------  Correlation matrix of random effects  ------
----------------------------------------------------
          omega2.b0 omega2.b1
omega2.b0 1         0        
omega2.b1 0         1        

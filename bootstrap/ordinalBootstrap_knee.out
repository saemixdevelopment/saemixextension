
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R est un logiciel libre livré sans AUCUNE GARANTIE.
Vous pouvez le redistribuer sous certaines conditions.
Tapez 'license()' ou 'licence()' pour plus de détails.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Tapez 'demo()' pour des démonstrations, 'help()' pour l'aide
en ligne ou 'help.start()' pour obtenir l'aide au format HTML.
Tapez 'q()' pour quitter R.

[Sauvegarde de la session précédente restaurée]

> # @Eco
> workDir<-"/home/eco/work/saemix/saemixextension/bootstrap"
> saemixDir <- "/home/eco/work/saemix/saemixextension"
> setwd(workDir)
> 
> #  Code saemix
> progDir <- file.path(saemixDir,"R")
> source(file.path(progDir,"aaa_generics.R"))
> #source(file.path(progDir,"global.R"))
> source(file.path(progDir,"SaemixData.R"))
> source(file.path(progDir,"SaemixRes.R"))
> source(file.path(progDir,"SaemixModel.R"))
> source(file.path(progDir,"SaemixObject.R"))
> source(file.path(progDir,"main.R"))
> source(file.path(progDir,"func_aux.R"))
> source(file.path(progDir,"main_initialiseMainAlgo.R"))
> source(file.path(progDir,"main_estep.R"))
> source(file.path(progDir,"main_mstep.R"))
> source(file.path(progDir,"func_FIM.R"))
> source(file.path(progDir,"func_npde.R"))
> source(file.path(progDir,"func_plots.R"))
> source(file.path(progDir,"func_distcond.R"))
> source(file.path(progDir,"func_simulations.R"))
> source(file.path(progDir,"compute_LL.R"))
> source(file.path(progDir,"func_estimParam.R"))
> source(file.path(progDir,"backward.R"))
> source(file.path(progDir,"forward.R"))
> source(file.path(progDir,"stepwise.R"))
> source(file.path(progDir,"func_stepwise.R"))
> source(file.path(progDir,"func_compare.R"))
> 
> # Bootstrap code
> source(file.path(saemixDir, "bootstrap", "saemix_bootstrap.R"))
> set.seed(42919)
> 
> # Number of bootstrap samples
> nboot <- 500
> 
> # Data
> datDir <- file.path(saemixDir, "data")
> knee.saemix <- read.table(file.path(datDir, "knee.saemix.tab"), header = T)
> 
> saemix.data<-saemixData(name.data=knee.saemix,name.group=c("id"),
+                         name.predictors=c("y", "time"), name.X=c("time"),
+                         name.covariates = c("Age","Sex","treatment","Age2"),
+                         units=list(x="d",y="", covariates=c("yr","-","-","yr2")))
Column name(s)  do(es) not exist in the dataset, please check
Remove columns 1 (  ) 
No valid name given, attempting automatic recognition
Automatic recognition of columns y successful 


The following SaemixData object was successfully created:

Object of class SaemixData
    longitudinal data for use with the SAEM algorithm
Dataset knee.saemix 
    Structured data: y ~ y + time | id 
    X variable for graphs: time (d) 
    covariates: Age (yr), Sex (-), treatment (-), Age2 (yr2) 
      reference class for covariate Sex :  0 
      reference class for covariate treatment :  0 
> 
> # Model
> ordinal.model<-function(psi,id,xidep) {
+   y<-xidep[,1]
+   time<-xidep[,2]
+   alp1<-psi[id,1]
+   alp2<-psi[id,2]
+   alp3<-psi[id,3]
+   alp4<-psi[id,4]
+   beta<-psi[id,5]
+   
+   logit1<-alp1 + beta*time
+   logit2<-logit1+alp2
+   logit3<-logit2+alp3
+   logit4<-logit3+alp4
+   pge1<-exp(logit1)/(1+exp(logit1))
+   pge2<-exp(logit2)/(1+exp(logit2))
+   pge3<-exp(logit3)/(1+exp(logit3))
+   pge4<-exp(logit4)/(1+exp(logit4))
+   pobs = (y==1)*pge1+(y==2)*(pge2 - pge1)+(y==3)*(pge3 - pge2)+(y==4)*(pge4 - pge3)+(y==5)*(1 - pge4)
+   logpdf <- log(pobs)
+   
+   return(logpdf)
+ }
> 
> # Simulation function
> simulateOrdinal<-function(psi,id,xidep) {
+   y<-xidep[,1]
+   time<-xidep[,2]
+   alp1<-psi[id,1]
+   alp2<-psi[id,2]
+   alp3<-psi[id,3]
+   alp4<-psi[id,4]
+   beta<-psi[id,5]
+   
+   logit1<-alp1 + beta*time
+   logit2<-logit1+alp2
+   logit3<-logit2+alp3
+   logit4<-logit3+alp4
+   pge1<-exp(logit1)/(1+exp(logit1))
+   pge2<-exp(logit2)/(1+exp(logit2))
+   pge3<-exp(logit3)/(1+exp(logit3))
+   pge4<-exp(logit4)/(1+exp(logit4))
+   x<-runif(length(time))
+   ysim<-1+as.integer(x>pge1)+as.integer(x>pge2)+as.integer(x>pge3)+as.integer(x>pge4)
+   return(ysim)
+ }
> 
> 
> # Saemix model
> saemix.model<-saemixModel(model=ordinal.model,description="Ordinal categorical model",modeltype="likelihood",
+                           simulate.function = simulateOrdinal,
+                           psi0=matrix(c(0,0.2, 0.6, 3, 0.2),ncol=5,byrow=TRUE,dimnames=list(NULL,c("alp1","alp2","alp3","alp4","beta"))),
+                           transform.par=c(0,1,1,1,1),omega.init=diag(c(100, 1, 1, 1, 1)), covariance.model = diag(c(1,0,0,0,1)))


The following SaemixModel object was successfully created:

Nonlinear mixed-effects model
  Model function:  Ordinal categorical model
  Model type:  likelihood
function (psi, id, xidep) 
{
    y <- xidep[, 1]
    time <- xidep[, 2]
    alp1 <- psi[id, 1]
    alp2 <- psi[id, 2]
    alp3 <- psi[id, 3]
    alp4 <- psi[id, 4]
    beta <- psi[id, 5]
    logit1 <- alp1 + beta * time
    logit2 <- logit1 + alp2
    logit3 <- logit2 + alp3
    logit4 <- logit3 + alp4
    pge1 <- exp(logit1)/(1 + exp(logit1))
    pge2 <- exp(logit2)/(1 + exp(logit2))
    pge3 <- exp(logit3)/(1 + exp(logit3))
    pge4 <- exp(logit4)/(1 + exp(logit4))
    pobs = (y == 1) * pge1 + (y == 2) * (pge2 - pge1) + (y == 
        3) * (pge3 - pge2) + (y == 4) * (pge4 - pge3) + (y == 
        5) * (1 - pge4)
    logpdf <- log(pobs)
    return(logpdf)
}
  Nb of parameters: 5 
      parameter names:  alp1 alp2 alp3 alp4 beta 
      distribution:
     Parameter Distribution Estimated
[1,] alp1      normal       Estimated
[2,] alp2      log-normal   Estimated
[3,] alp3      log-normal   Estimated
[4,] alp4      log-normal   Estimated
[5,] beta      log-normal   Estimated
  Variance-covariance matrix:
     alp1 alp2 alp3 alp4 beta
alp1    1    0    0    0    0
alp2    0    0    0    0    0
alp3    0    0    0    0    0
alp4    0    0    0    0    0
beta    0    0    0    0    1
    No covariate in the model.
    Initial values
             alp1 alp2 alp3 alp4 beta
Pop.CondInit    0  0.2  0.6    3  0.2
> 
> # Fitting
> saemix.options<-list(seed=632545, save=FALSE, fim=FALSE, save.graphs=FALSE, nb.chains=10, nbiter.saemix=c(600,100))
> #saemix.options<-list(seed=632545,save=FALSE,save.graphs=FALSE, nb.chains=10, fim=FALSE)
> 
> ord.fit<-saemix(saemix.model,saemix.data,saemix.options)
Nonlinear mixed-effects model fit by the SAEM algorithm
-----------------------------------
----          Data             ----
-----------------------------------
Object of class SaemixData
    longitudinal data for use with the SAEM algorithm
Dataset knee.saemix 
    Structured data: y ~ y + time | id 
    X variable for graphs: time (d) 
    covariates: Age (yr), Sex (-), treatment (-), Age2 (yr2) 
      reference class for covariate Sex :  0 
      reference class for covariate treatment :  0 
Dataset characteristics:
    number of subjects:     127 
    number of observations: 508 
    average/min/max nb obs: 4.00  /  4  /  4 
First 10 lines of data:
   id y time y.1 Age Sex treatment Age2 mdv cens occ ytype
1   1 4    0   4  -2   1         0    4   0    0   1     1
2   1 4    3   4  -2   1         0    4   0    0   1     1
3   1 4    7   4  -2   1         0    4   0    0   1     1
4   1 4   10   4  -2   1         0    4   0    0   1     1
5   2 4    0   4   2   1         0    4   0    0   1     1
6   2 4    3   4   2   1         0    4   0    0   1     1
7   2 4    7   4   2   1         0    4   0    0   1     1
8   2 4   10   4   2   1         0    4   0    0   1     1
9   3 3    0   3  11   1         0  121   0    0   1     1
10  3 3    3   3  11   1         0  121   0    0   1     1
-----------------------------------
----          Model            ----
-----------------------------------
Nonlinear mixed-effects model
  Model function:  Ordinal categorical model
  Model type:  likelihood
function (psi, id, xidep) 
{
    y <- xidep[, 1]
    time <- xidep[, 2]
    alp1 <- psi[id, 1]
    alp2 <- psi[id, 2]
    alp3 <- psi[id, 3]
    alp4 <- psi[id, 4]
    beta <- psi[id, 5]
    logit1 <- alp1 + beta * time
    logit2 <- logit1 + alp2
    logit3 <- logit2 + alp3
    logit4 <- logit3 + alp4
    pge1 <- exp(logit1)/(1 + exp(logit1))
    pge2 <- exp(logit2)/(1 + exp(logit2))
    pge3 <- exp(logit3)/(1 + exp(logit3))
    pge4 <- exp(logit4)/(1 + exp(logit4))
    pobs = (y == 1) * pge1 + (y == 2) * (pge2 - pge1) + (y == 
        3) * (pge3 - pge2) + (y == 4) * (pge4 - pge3) + (y == 
        5) * (1 - pge4)
    logpdf <- log(pobs)
    return(logpdf)
}
<bytecode: 0x559ce9cea068>
  Nb of parameters: 5 
      parameter names:  alp1 alp2 alp3 alp4 beta 
      distribution:
     Parameter Distribution Estimated
[1,] alp1      normal       Estimated
[2,] alp2      log-normal   Estimated
[3,] alp3      log-normal   Estimated
[4,] alp4      log-normal   Estimated
[5,] beta      log-normal   Estimated
  Variance-covariance matrix:
     alp1 alp2 alp3 alp4 beta
alp1    1    0    0    0    0
alp2    0    0    0    0    0
alp3    0    0    0    0    0
alp4    0    0    0    0    0
beta    0    0    0    0    1
    No covariate in the model.
    Initial values
             alp1 alp2 alp3 alp4 beta
Pop.CondInit    0  0.2  0.6    3  0.2
-----------------------------------
----    Key algorithm options  ----
-----------------------------------
    Estimation of individual parameters (MAP)
    Estimation of log-likelihood by importance sampling
    Number of iterations:  K1=600, K2=100 
    Number of chains:  10 
    Seed:  632545 
    Number of MCMC iterations for IS:  5000 
    Simulations:
        nb of simulated datasets used for npde:  1000 
        nb of simulated datasets used for VPC:  100 
    Input/output
        save the results to a file:  FALSE 
        save the graphs to files:  FALSE 
----------------------------------------------------
----                  Results                   ----
----------------------------------------------------
-----------------  Fixed effects  ------------------
----------------------------------------------------
     Parameter Estimate
[1,] alp1      -15.21  
[2,] alp2        6.51  
[3,] alp3        8.49  
[4,] alp4       12.48  
[5,] beta        0.87  
----------------------------------------------------
-----------  Variance of random effects  -----------
----------------------------------------------------
     Parameter   Estimate
alp1 omega2.alp1 189.79  
beta omega2.beta   0.55  
----------------------------------------------------
------  Correlation matrix of random effects  ------
----------------------------------------------------
            omega2.alp1 omega2.beta
omega2.alp1 1           0          
omega2.beta 0           1          
----------------------------------------------------
---------------  Statistical criteria  -------------
----------------------------------------------------

Likelihood computed by importance sampling
      -2LL= 859.7992 
      AIC = 875.7992 
      BIC = 898.5527 
----------------------------------------------------
> 
> # Case bootstrap
> case.ordinal <- try(saemix.bootstrap(ord.fit, method="case", nboot=nboot))
Error in initialiseMainAlgo(saemix.data, saemix.model, saemix.options) : 
  stats:fit.saemix:FailedInitialParameterGuess
Failed to find a valid initial parameter guess

> if(is(case.ordinal,"data.frame"))
+   write.table(case.ordinal, file.path(workDir, "results", "knee_caseBootstrap.res"), quote=F, row.names=FALSE)
> 
> # Conditional non-parametric bootstrap
> cond.ordinal <- try(saemix.bootstrap(ord.fit, method="conditional", nboot=nboot))
Error in initialiseMainAlgo(saemix.data, saemix.model, saemix.options) : 
  stats:fit.saemix:FailedInitialParameterGuess
Failed to find a valid initial parameter guess

> if(is(cond.ordinal,"data.frame"))
+   write.table(cond.ordinal, file.path(workDir, "results", "knee_condBootstrap.res"), quote=F, row.names=FALSE)
> 
> 
> proc.time()
utilisateur     système      écoulé 
  76500.482      25.987   76541.234 
